#!/usr/bin/env python3

"""post queue and cooldown"""

import os
import time
import datetime
from random import randint

from instagrapi import Client
from instagrapi.exceptions import UnknownError

from src.config import (
    POST_DELAY_MIN_SECONDS, POST_DELAY_MAX_SECONDS
)

from threadsafe_shell import Shell, get_shell

class PostQueue:
    def __init__(self, client: Client, shell: Shell = None):
        self.__queue = []
        self.__cooldown_expires = int(time.time())
        self.client = client
        self.shell = get_shell() if shell is None else shell


    class AlreadyInQueueException(Exception): pass

    def add(self, path) -> (bool, Exception):
        if self.__queue.__contains__(path):
            return False, self.__class__.AlreadyInQueueException("already in queue")
        self.__queue.append(path)
        return True, None
    

    def generate_new_cooldown(self, posted=True, nothing_to_post=False) -> None:
        if nothing_to_post:
            self.__cooldown_expires = int(time.time()) + 30
            self.shell.log("Nothing to post. Waiting", self.shell.highlight(30), "seconds for next scan.")
        elif not posted:
            self.__cooldown_expires = int(time.time()) + 10
            self.shell.log("Last post not successfully posted. Waiting", self.shell.highlight(10), "seconds for API cooldown.")
        else:
            cool = randint(POST_DELAY_MIN_SECONDS, POST_DELAY_MAX_SECONDS)
            self.__cooldown_expires = int(time.time()) + cool
            self.shell.log("New post cooldown", self.shell.highlight(cool), "seconds.")


    @staticmethod
    def parse_path(filename) -> (str, str, str):
        if filename.count("/") > 0:
            *folder, filename = filename.split("/")
            folder = "/".join(folder)
        else: folder = ""
        if filename.count(".") > 0:
            *filename, filefmt = filename.split(".")
            filename = ".".join(filename)
        else: filefmt = ""
        return (folder, filename, filefmt)
    

    def get_next_filename(self):
        return self.__queue[0]


    def post(self, *args, **kwargs) -> (bool, object):
        if len(self.__queue) == 0: return False, "nothing to post"
        path = self.__queue.pop(0)
        (folder, filename, filefmt) = self.__class__.parse_path(path)
        # try upload
        self.shell.log("UPL  Posting", path)
        self.shell.debug("UPL  Attempting to upload", path)
        try:
            if filefmt == "jpg": media = self.client.photo_upload(path, *args, **kwargs)
            elif filefmt == "mp4": media = self.client.video_upload(path, *args, **kwargs)
            else: return False, "invalid mime type"
            data = media.dict()
            data["taken_at"] = data["taken_at"] - datetime.timedelta(hours=4)  # apply timezone info, the messy and bad way
            self.shell.success("UPL  Posted", self.shell.highlight(filename+'.'+filefmt), "at", data["taken_at"].strftime("%I:%M on %b %-d"))
            try:
                self.shell.debug("Sleeping 3 seconds to like, to avoid ratelimits")
                time.sleep(3) # ratelimit mitigation
                self.client.media_like(data["id"])
                self.shell.log("UPL  Successfully liked uploaded post.")
            except Exception as e:
                self.shell.warn("UPL  Couldn't like post, failed with error:", str(e))
            self.generate_new_cooldown()
        except UnknownError as e:
            if "Uploaded image isn't in an allowed aspect ratio" in str(e):
                self.shell.warn("UPL  Image not in correct aspect ratio, skipping!")
                self.generate_new_cooldown(posted=False)
                data = {}
            else:
                self.generate_new_cooldown(posted=False)
                raise
        # move to discard
        os.rename(path, "media/discard/"+filename+"."+filefmt)
        if filefmt == "mp4": os.remove(path+".jpg") # delete autogenerated thumbnail
        self.shell.debug("UPL  Moved to discard folder.")
        # return data
        data["filename"] = filename
        data["media_type"] = filefmt
        self.shell.debug("UPL  Done upload cycle.")
        return True, data
    
    
    def get_cooldown(self) -> int:
        return max(self.__cooldown_expires - int(time.time()), 0)
    
    def is_cooldown(self) -> bool:
        return int(time.time()) < self.__cooldown_expires


    def __len__(self) -> int:
        return len(self.__queue)

    def __repr__(self) -> str:
        return f"<PostQueue length={self.length()} {str(self.__queue)}>"
    
    def __str__(self) -> str:
        return f"<PostQueue length={self.length()} {str(self.__queue)}>"
